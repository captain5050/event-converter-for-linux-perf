#!/usr/bin/python

# Copyright (c) 2020, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of Intel Corporation nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# print-expr "pandas expr" file.json
# print all events from a json event matching expr
# all json fields are valid, but prefix with ev.
# && should be &
# || should be |
# strings should be quoted
# hex numbers should be matched as strings (and case-sensitive!)
# e.g.
# print-expr '(ev.Data_LA == 1) & (ev.PEBS == 1)' file.json

import pandas as pd
import sys
import argparse
import re

ap = argparse.ArgumentParser(usage='print all events from a json file matching expr')
ap.add_argument('expr')
ap.add_argument('jsonfile')
args = ap.parse_args()

ev = pd.read_json(args['jsonfile'])
ev.set_index('EventName', inplace=True)

ops = {
    "&&": "&",
    "and": "&",
    "||": "|",
    "or": "|",
}

def fix_token(t):
    if t in ops:
        return ops[t]
    if t in ev:
        return 'ev.' + t
    if t.startswith("0x"):
        return '"' + t.upper() + '"'
    return t

expr = " ".join(map(fix_token, args['expr']))

print "Expr: ", expr

for name, j in eval('ev[' + expr + ']').iterrows():
    print name
